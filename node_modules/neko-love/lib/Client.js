"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var node_fetch_1 = require("node-fetch");
var query_string_1 = require("query-string");
/**
 * Client for Neko Love Wrapper
 */
var NekoClient = /** @class */ (function () {
    function NekoClient(options) {
        if (options === void 0) { options = {
            url: 'https://neko-love.xyz/api'
        }; }
        this.baseURL = options.url;
    }
    /**
     * Neko endpoint
     */
    NekoClient.prototype.neko = function () {
        return this.get('neko').then(function (body) { return body.url; });
    };
    /**
     * Nekolewd endpoint
     */
    NekoClient.prototype.nekolewd = function () {
        return this.get('nekolewd').then(function (body) { return body.url; });
    };
    /**
     * Kistune endpoint
     */
    NekoClient.prototype.kitsune = function () {
        return this.get('kitsune').then(function (body) { return body.url; });
    };
    /**
     * Pat endpoint
     */
    NekoClient.prototype.pat = function () {
        return this.get('pat').then(function (body) { return body.url; });
    };
    /**
     * Hug endpoint
     */
    NekoClient.prototype.hug = function () {
        return this.get('hug').then(function (body) { return body.url; });
    };
    /**
     * Waifu endpoint
     */
    NekoClient.prototype.waifu = function () {
        return this.get('waifu').then(function (body) { return body.url; });
    };
    /**
     * Cry endpoint
     */
    NekoClient.prototype.cry = function () {
        return this.get('cry').then(function (body) { return body.url; });
    };
    /**
     * Kiss endpoint
     */
    NekoClient.prototype.kiss = function () {
        return this.get('kiss').then(function (body) { return body.url; });
    };
    /**
     * Slap endpoint
     */
    NekoClient.prototype.slap = function () {
        return this.get('slap').then(function (body) { return body.url; });
    };
    /**
     * Smug endpoint
     */
    NekoClient.prototype.smug = function () {
        return this.get('smug').then(function (body) { return body.url; });
    };
    /**
     * Punch endpoint
     */
    NekoClient.prototype.punch = function () {
        return this.get('punch').then(function (body) { return body.url; });
    };
    /**
     * Burple endpoint
     */
    NekoClient.prototype.blurple = function (url) {
        if (!url)
            throw new Error("url parameter is required for blurple endpoint.");
        return this.get('blurple', 'v2', {
            url: url
        }).then(function (body) { return body.url; });
    };
    /**
     * Brightness endpoint
     */
    NekoClient.prototype.brightness = function (url) {
        if (!url)
            throw new Error("url parameter is required for brightness endpoint.");
        return this.get('brightness', 'v2', {
            url: url
        }).then(function (body) { return body.url; });
    };
    /**
     * Pixelate endpoint
     */
    NekoClient.prototype.pixelate = function (url) {
        if (!url)
            throw new Error("url parameter is required for pixelate endpoint.");
        return this.get('pixelate', 'v2', {
            url: url
        }).then(function (body) { return body.url; });
    };
    /**
     * Gotham endpoint
     */
    NekoClient.prototype.gotham = function (url) {
        if (!url)
            throw new Error("url parameter is required for gotham endpoint.");
        return this.get('gotham', 'v2', {
            url: url
        }).then(function (body) { return body.url; });
    };
    /**
     * Invert endpoint
     */
    NekoClient.prototype.invert = function (url) {
        if (!url)
            throw new Error("url parameter is required for invert endpoint.");
        return this.get('invert', 'v2', {
            url: url
        }).then(function (body) { return body.url; });
    };
    /**
     * Sepia endpoint
     */
    NekoClient.prototype.sepia = function (url) {
        if (!url)
            throw new Error("url parameter is required for sepia endpoint.");
        return this.get('sepia', 'v2', {
            url: url
        }).then(function (body) { return body.url; });
    };
    /**
     * Posterize endpoint
     */
    NekoClient.prototype.posterize = function (url) {
        if (!url)
            throw new Error("url parameter is required for posterize endpoint.");
        return this.get('posterize', 'v2', {
            url: url
        }).then(function (body) { return body.url; });
    };
    /**
     * Blur endpoint
     */
    NekoClient.prototype.blur = function (url) {
        if (!url)
            throw new Error("url parameter is required for blur endpoint.");
        return this.get('blur', 'v2', {
            url: url
        }).then(function (body) { return body.url; });
    };
    /**
     * Private method used to get endpoints with querys
     */
    NekoClient.prototype.get = function (endpoint, version, params) {
        if (version === void 0) { version = 'v1'; }
        return __awaiter(this, void 0, void 0, function () {
            var fetchURL, res, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fetchURL = this.baseURL + "/" + version + "/" + endpoint;
                        if (params) {
                            fetchURL += query_string_1.stringify(params);
                        }
                        return [4 /*yield*/, node_fetch_1.default(fetchURL)];
                    case 1:
                        res = _a.sent();
                        if (res.status !== 200)
                            throw res;
                        return [4 /*yield*/, res.json()];
                    case 2:
                        data = _a.sent();
                        return [2 /*return*/, data];
                }
            });
        });
    };
    return NekoClient;
}());
exports.default = NekoClient;
