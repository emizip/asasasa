interface NekoClientOptions {
    url: string;
}
interface NekoResponse {
    code: number;
    url: string;
}
/**
 * Client for Neko Love Wrapper
 */
declare class NekoClient {
    private baseURL;
    constructor(options?: NekoClientOptions);
    /**
     * Neko endpoint
     */
    neko(): Promise<string>;
    /**
     * Nekolewd endpoint
     */
    nekolewd(): Promise<string>;
    /**
     * Kistune endpoint
     */
    kitsune(): Promise<string>;
    /**
     * Pat endpoint
     */
    pat(): Promise<string>;
    /**
     * Hug endpoint
     */
    hug(): Promise<string>;
    /**
     * Waifu endpoint
     */
    waifu(): Promise<string>;
    /**
     * Cry endpoint
     */
    cry(): Promise<string>;
    /**
     * Kiss endpoint
     */
    kiss(): Promise<string>;
    /**
     * Slap endpoint
     */
    slap(): Promise<string>;
    /**
     * Smug endpoint
     */
    smug(): Promise<string>;
    /**
     * Punch endpoint
     */
    punch(): Promise<string>;
    /**
     * Burple endpoint
     */
    blurple(url: string): Promise<string>;
    /**
     * Brightness endpoint
     */
    brightness(url: string): Promise<string>;
    /**
     * Pixelate endpoint
     */
    pixelate(url: string): Promise<string>;
    /**
     * Gotham endpoint
     */
    gotham(url: string): Promise<string>;
    /**
     * Invert endpoint
     */
    invert(url: string): Promise<string>;
    /**
     * Sepia endpoint
     */
    sepia(url: string): Promise<string>;
    /**
     * Posterize endpoint
     */
    posterize(url: string): Promise<string>;
    /**
     * Blur endpoint
     */
    blur(url: string): Promise<string>;
    /**
     * Private method used to get endpoints with querys
     */
    get(endpoint: string, version?: string, params?: object): Promise<NekoResponse>;
}
export default NekoClient;
